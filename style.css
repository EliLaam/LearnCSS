/* 
CSS SELECTORS: 
    We can divide CSS selectors into five categories:
    Simple selectors (select elements based on name, id, class)
    Combinator selectors (select elements based on a specific relationship between them)
    Pseudo-class selectors (select elements based on a certain state)
    Pseudo-elements selectors (select and style a part of an element)
    Attribute selectors (select elements based on an attribute or attribute value)
*/

/* ——————————————————————————————————————— 
  SIMPLE SELECTORS 
——————————————————————————————————————————————————— */
/* THE ELEMENTS SELECTOR
  The element selector selects HTML elements based on the element name. */

/* delete comment(/*) to try ↓ */
/*
p {
  text-align: center;
}  
*/
/*
  LƯU Ý QUAN TRỌNG:
  Trong dự án THỰC TẾ, các style trên sẽ bị xung đột với nhau.
  Chúng ta cần làm cho chúng CỤ THỂ hơn bằng cách sử dụng bộ chọn con cháu (combinator).
  Đây là cách làm đúng chuẩn để tránh xung đột với các phần tử p ở khu vực khác.
*/
.element-selector p {
  color: #fb0000; /* màu chữ */
}

/* THE ID SELECTOR 
  The id selector uses the id attribute of an HTML element to select a specific element.
  The id of an element is unique within a page, so the id selector is used to select one unique element!
  To select an element with a specific id, write a hash (#) character, followed by the id of the element.  */
#example {
  color: #ff7308;
}
/* ----Note: An id name cannot start with a number!---- */

/* THE CLASS SELECTOR 
  The class selector selects HTML elements with a specific class attribute.
  To select elements with a specific class, write a period (.) character, followed by the class name.   */
.example {
  color: #ffe600;
}
/* You can also specify that only specific HTML elements should be affected by a class. In this example only <p> elements with class="example" will be ...   */
p.example {
  text-align: center; /* căn chữ */
}
/* HTML elements can also refer to more than one class. In this example the <p> element will be styled according to class="two" and to class="class":    */
.two.class {
  font-style: italic;
  color: #ffe600;
}
/* ----Note: A class name cannot start with a number!---- */

/* THE UNIVERSAL SELECTOR 
  The universal selector (*) selects all HTML elements on the page.  */
* {
  font-family: "Times New Roman", Times, serif;
}

/* THE GROUPING SELECTOR 
  The grouping selector selects all the HTML elements with the same style definitions. It will be better to group the selectors, to minimize the code. To group selectors, separate each selector with a comma (,).    */
h5,
h6,
p.grouping,
#grouping {
  color: #7bff00;
}

/* Review All CSS Simple Selectors 
#id                        #demo            Selects the element with id="demo"; 
.class                     .intro           Selects all elements with class="intro"; 
*	                         *                Selects all elements 
element                    p  	            Selects all <p> elements 
element,element,..	       div, p           Selects all <div> elements and all <p> elements 
class,class,...            .a1.a2           Selects all element with a2 that is a descendant of an element with a1
element.class              p.hello          Selects only <p> elements with class="hello"; */

/* ——————————————————————————————————————— 
  COMBINATOR SELECTORS 
——————————————————————————————————————————————————— */
/* 1. Descendant Combinator (space)
  The descendant combinator matches all elements that are descendants (children, grandchildren, etc.) of a specified element. 
  The following example selects all <p> elements inside <div> elements: */
div.descendant-combinator p {
  color: #00ff44;
}

/* 2. Child Combinator (>)
  The child combinator selects all elements that are direct children of a specified element.
  The following example selects all <p> elements that are direct children of <div>:  */
div.child-combinator > p {
  color: #00ffbf;
}

/* 3. Next Sibling Combinator (+) 
  The next sibling combinator is used to select an element that is directly after a specific element.
  Sibling elements must have the same parent element.
  The following example selects the first <p> element that immediately follows a <h3>, and share the same parent:
*/
.next-sibling-combinator h3 + p {
  color: #00bbff;
}

/* 4. Subsequent-sibling Combinator (~)
  The subsequent-sibling combinator selects all elements that are next siblings of a specified element.
  The following example selects all <p> elements that are next siblings of <h3>, and share the same parent:  */
.subsequent-sibling-combinator h3 ~ p {
  color: rgb(25, 0, 255);
}

/* Review All Combinator Selector 
Child combinator	              div > p	            Selects every <p> element that are direct children of a <div> element
Descendant combinator	          div p	              Selects all <p> elements inside <div> elements
Namespace separator	            ns | h2	            Selects all <h2> elements in namespace ns
Next-sibling combinator	        div + p	            Selects the first <p> element that is placed immediately after <div> ele
Selector list	                  div, p	            Selects all <div> elements and all <p> elements
Subsequent-sibling combinator	  p ~ ul	            Selects all <ul> elements that are preceded by a <p> element
 */

/* ——————————————————————————————————————— 
  ATTRIBUTE SELECTORS 
——————————————————————————————————————————————————— */
/* [attribute]
	Selects all elements with (a title) attribute  */
.demo-attribute-exists [title] {
  color: rgb(183, 0, 255);
}

/* [attribute="value"] 
	Selects all elements with (title="hello") */
.demo-attribute-exact [title="hello"] {
  color: rgb(248, 64, 248);
}

/* [attribute~="value"] 
  Selects all elements with (a title) attribute containing the word ("miko") */
.demo-attribute-word [title~="miko"] {
  color: rgb(255, 120, 239);
}

/* [attribute|="value"] 
Selects all elements with a title attribute value equal to "en" or starting with "en-" */
.demo-attribute-prefix-hyphen [lang|="en"] {
  color: #820293;
}

/* [attribute^="value"]
Selects all elements with a href attribute value that begins with "https" */
.demo-attribute-starts-with [href="https"] {
  color: #ff0b7d;
}

/* [attribute$="value"] 
Selects all elements with a href attribute value ends with ".pdf"*/
.demo-attribute-ends-with [href$=".pdf"] {
  color: #c62323;
}

/* [attribute*=value]
  Selects all elements with a href attribute value containing the substring "word" */
[title*="raiden"] {
  color: #5000a0;
}

/* Review All Attribute Selector 
[attribute ~= value] Chọn phần tử có thuộc tính chứa một TỪ (word) hoàn chỉnh, được ngăn cách bởi khoảng trắng. (Đứng 1 mình)
[attribute |= value] chọn từ có value đứng đầu và "chỉ 1 từ" hoặc có dấu gạch nối từ vd  abc-123 
[attribute ^= value]  chọn từ có value đứng đầu là đc vd có chữ abc đứng đầu là đc hết
[attribute $=  a] chọn từ có kết thúc là chữ a là đc 
[attribute *= value] có value là chọn vd abc, abc1.  */

/* ——————————————————————————————————————— 
COLOR
——————————————————————————————————————————————————— */
/* Được sử dụng cho các thuộc tính như color (màu chữ) , background-color (màu nền),... */
/*  RGBA Color  */
.rgba-demo .p1 {
  background-color: rgba(255, 0, 0, 0.3);
}
.rgba-demo .p2 {
  background-color: rgba(0, 255, 0, 0.3);
}
.rgba-demo .p3 {
  background-color: rgba(0, 0, 255, 0.3);
}
.rgba-demo .p4 {
  background-color: rgba(192, 192, 192, 0.3);
}
.rgba-demo .p5 {
  background-color: rgba(255, 255, 0, 0.3);
}
.rgba-demo .p6 {
  background-color: rgba(255, 0, 255, 0.3);
}

/*  HSLA Colors  */
.hsla-demo .p1 {
  background-color: hsla(120, 100%, 50%, 0.3);
}
.hsla-demo .p2 {
  background-color: hsla(120, 100%, 75%, 0.3);
}
.hsla-demo .p3 {
  background-color: hsla(120, 100%, 25%, 0.3);
}
.hsla-demo .p4 {
  background-color: hsla(120, 60%, 70%, 0.3);
}
.hsla-demo .p5 {
  background-color: hsla(290, 100%, 50%, 0.3);
}
.hsla-demo .p6 {
  background-color: hsla(290, 60%, 70%, 0.3);
}

/*  CSS Opacity Property  
  Độ mờ cho nội dung được chọn */
.opacity-demo .p1 {
  background-color: rgb(255, 0, 0);
  opacity: 0.1;
}
.opacity-demo .p2 {
  background-color: rgb(0, 255, 0);
  opacity: 0.2;
}
.opacity-demo .p3 {
  background-color: rgb(0, 0, 255);
  opacity: 0.4;
}
.opacity-demo .p4 {
  background-color: rgb(192, 192, 192);
  opacity: 0.6;
}
.opacity-demo .p5 {
  background-color: rgb(255, 255, 0);
  opacity: 0.8;
}
.opacity-demo .p6 {
  background-color: rgb(255, 0, 255);
  opacity: 1;
}

/* ——————————————————————————————————————— 
CSS BACKGROUND
——————————————————————————————————————————————————— */
/* Background color */
.demo-background-color h4 {
  background-color: #098cff;
}
.demo-background-color div {
  height: 100px; /* chiều cao cho nội dung */
  width: 100px; /* chiều rộng cho nội dung */
  background-color: yellow;
}

/* Background image 
  Dùng hình ảnh làm nền cho nội dung bằng url*/
.box-background-image {
  height: 200px; /* chiều cao cho nội dung */
  width: 800px; /* chiều rộng cho nội dung */
  background-image: url(./img/20250807164636.png);
}

/* Background size 
  Điều chỉnh kích thước background*/

/* dùng height & width */
.box-background-size {
  height: 200px; /* chiều cao cho nội dung */
  width: 200px; /* chiều rộng cho nội dung */
  background-image: url(./img/20250807164921.png);
}

/* dùng thuộc tính background-size */
.box-background-size2 {
  height: 200px;
  width: 200px;
  background-size: contain;
  background-image: url(./img/20250807164921.png);
}

.box-background-size3 {
  height: 200px;
  width: 200px;
  background-size: cover;
  background-image: url(./img/20250807164921.png);
}

/* 2 đối số  */
.box-background-size4 {
  height: 200px;
  width: 500px;
  background-size: 100% 100%; /* ngang dọc */
  background-image: url(./img/20250807164921.png);
}

.box-background-size5 {
  height: 200px;
  width: 200px;
  background-size: 100% 100%; /*bằng 100% ngang, dọc*/
  background-image: url(./img/20250807164921.png);
}

/* 1 đối số */
.box-background-size6 {
  height: 200px;
  width: 500px;
  background-size: 100%; /*bằng 100% ngang*/
  background-image: url(./img/20250807164921.png);
}

/* Background repeat
  Ảnh lặp lại */
.demo-background-repeat {
  height: 50vh; /* bằng 50 view height */
  background-image: url(./ico/android-icon-144x144.png);
}
.demo-background-repeat2 {
  height: 50vh; /* bằng 50 view height */
  background-image: url(./ico/android-icon-144x144.png);
  background-repeat: no-repeat; /*không lặp lại*/
}
.demo-background-repeat3 {
  height: 50vh; /* bằng 50 view height */
  background-image: url(./ico/android-icon-144x144.png);
  background-repeat: repeat-x; /*lặp theo trục ngang */
}
.demo-background-repeat4 {
  height: 50vh; /* bằng 50 view height */
  background-image: url(./ico/android-icon-144x144.png);
  background-repeat: repeat-y; /*lặp theo trục dọc */
}

/* ——————————————————————————————————————— 
CSS TYPOGRAPHY 
——————————————————————————————————————————————————— */
/* FONT - 
Có thể sử dụng các font hệ thống, GG font, điều chỉnh kích thước kiểu dáng yêu thích    */
.suse-font {
  font-family: "SUSE Mono", sans-serif;
  font-optical-sizing: auto;
  font-weight: weight;
  font-style: normal;
}
/* The CSS font property is a shorthand property for:
font-style
font-variant
font-weight
font-stretch
font-size
line-height
font-family */

.suse-font2 {
  /* font-family: "SUSE Mono", sans-serif;
  font-optical-sizing: auto; dòng này không cần thiết
  font-size: larger;
  font-weight: bold;
  font-style: italic; */
  font: italic bold large "SUSE Mono", sans-serif;
}

.ink-font {
  font-family: "Bitcount Prop Double Ink", system-ui;
  font-optical-sizing: auto;
  font-weight: weight;
  font-style: normal;
  font-variation-settings: "slnt" 0, "CRSV" 0.5, "ELSH" 0, "ELXP" 0, "SZP1" 0,
    "SZP2" 0, "XPN1" 0, "XPN2" 0, "YPN1" 0, "YPN2" 0;
}
/* Lưu ý quan trọng: Phải luôn có font thay thế đằng sau các font mình dùng, vì trình duyệt người khác có thể không tải font đó, font đứng sau sẽ hiển thị thay, thứ tự từ trái sang phải. */

.property-font th {
  text-align: left;
  width: 200px;
}

.ex-font {
  font: italic bold large monospace, system-ui;
}
.ex-font-family {
  font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
    "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
}
.ex-font-size {
  font-size: 13px;
}
.ex-font-style {
  font-style: italic;
}
.ex-font-variant {
  font-variant: small-caps;
}
.ex-font-weight {
  font-weight: 800;
}

/* Property	Description
  font	        -Sets all the font properties in one declaration
  font-family	  -Specifies the font family for text
  font-size	    -Specifies the font size of text
  font-style	  -Specifies the font style for text
  font-variant	-Specifies whether or not a text should be displayed in a small-caps font
  font-weight	  -Specifies the weight of a font */

/* LINE HEIGHT & LETTER SPACING */
/* Line height 
  Defines the height of a single line of text */
.demo-line-height {
  line-height: normal;
  background-color: #00bbff;
}
.demo-line-height2 {
  font-size: medium;
  line-height: 1.6;
  background-color: #00bbff;
}
.demo-line-height3 {
  line-height: 60px;
  background-color: #00bbff;
}
.demo-line-height4 {
  line-height: 0.5em;
  background-color: #00bbff;
}

/* Letter spacing
Defines the spacing between the characters of a block of text.*/
.letter-spacing {
  letter-spacing: normal;
  background-color: #34a123;
}
.letter-spacing2 {
  letter-spacing: 5px;
  background-color: #34a123;
}
.letter-spacing3 {
  letter-spacing: 2em;
  background-color: #34a123;
}

/*  TEXT  */
/* Text-Align
Defines how the text content of the element is horizontally aligned   */
table.demo-text-align td:first-child {
  width: 200px;
  background-color: #96c2ff;
  border: 2px solid rgb(55, 55, 55);
}
table.demo-text-align td:last-child {
  width: 400px;
  background-color: #9af8a2;
  border: 2px solid rgb(54, 54, 54);
}

.text-left td:last-child {
  text-align: left;
}
.text-right td:last-child {
  text-align: right;
}
.text-centered td:last-child {
  text-align: center;
}
.text-justified td:last-child {
  text-align: justify;
}

/* Text-Decoration
Defines how the text content of the element is decorated.      */

.demo-text-decoration p:first-of-type {
  text-decoration: none;
}
.demo-text-decoration p:nth-of-type(2) {
  text-decoration: underline;
}
.demo-text-decoration p:nth-of-type(3) {
  text-decoration: line-through;
}
.demo-text-decoration p:nth-of-type(4) {
  text-decoration: overline;
}

/* Text-Indent
Defines the indentation of the element's first line of text.        */

.demo-text-indent td:first-child {
  width: 200px;
  background-color: #96c2ff;
  border: 2px solid rgb(55, 55, 55);
}
.demo-text-indent td:last-child {
  width: 400px;
  background-color: #9af8a2;
  border: 2px solid rgb(54, 54, 54);
}
.not-indented-text {
  text-indent: none;
}
.indented-text {
  text-indent: 3em;
}
.negative-indented-text {
  text-indent: -2em;
}

/* Text-Overflow
Defines how the hidden text content behaves if it's overflowing.  
Both of the following properties are required for text-overflow to take effect: 
white-space: nowrap;
overflow: hidden */

.default-text-overflow {
  width: 200px;
  border: 1px solid #000000;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: none;
}
.clipped-text-overflow {
  width: 200px;
  border: 1px solid #000000;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Text-Shadow
The CSS text-shadow property applies a shadow to text.
In its simplest use, you only specify the horizontal and the vertical shadow.
In addition, you can add a shadow color and blur effect.   */

.text-shadow1 {
  text-shadow: 2px 2px;
}
.text-shadow2 {
  text-shadow: 2px 2px red;
}
.text-shadow3 {
  text-shadow: 2px 2px 5px red;
}
.text-shadow4 {
  color: white;
  text-shadow: 2px 2px 4px #000000;
}

/* Text-Transform
Defines how the text content should be transformed.*/

.demo-text-transform p[class*="transform"] {
  background-color: #dcbaff;
  border: 2px dotted violet;
}
.removes-text-transform {
  text-transform: none;
}
.capital-first-text-transform {
  text-transform: capitalize;
}
.capital-all-text-transform {
  text-transform: uppercase;
}
.lowercase-text-transform {
  text-transform: lowercase;
}

/* Word-wrap & Word-break & Word-spacing */
/* Allow long words to be able to be broken and wrap onto the next line:  */
.no-word-wrap {
  width: 170px;
  border: 1px solid #000000;
  padding: 8px;
  word-wrap: normal;
}
.word-wrap {
  width: 170px;
  border: 1px solid #000000;
  padding: 8px;
  word-wrap: break-word;
}

/* The CSS word-break property specifies how words should break when reaching the end of a line.
This property can take one of the following values:
normal - This is default. Uses the default line breaking rules of the language
break-all - Allows words to be broken at any character to prevent overflow
keep-all - Prevents words from breaking */
.word-break {
  width: 170px;
  border: 1px solid #000000;
  padding: 8px;
  word-break: normal;
}
.word-break2 {
  width: 170px;
  border: 1px solid #000000;
  padding: 8px;
  word-break: break-all;
}

/* The word-spacing defines the spacing between words of a block of text  
You can use pixel, em values: this allows the spacing to remain relative to the font-size.*/

.word-spacing {
  word-spacing: 20px;
}

/* White-space 
Defines how the element's white  space is handled  */
.white-space-nowrap {
  white-space: nowrap;
}
.white-space-normal {
  white-space: normal;
}
.white-space-pre {
  white-space: pre;
}
.white-space-pre-wrap {
  white-space: pre-wrap;
}
.white-space-pre-line {
  white-space: pre-line;
}

/* ——————————————————————————————————————— 
  DEFAULT - RESET
  ——————————————————————————————————————————————————— */
/* Default CSS Values 
  a:link, a:visited { 
    color:  browser's internal value ;
    text-decoration: underline;
    cursor: auto;
  }

a:link:active, a:visited:active { 
  color:  browser's internal value ;
}    ... */

/* ——————————————————————————————————————— 
BOX MODEL 
——————————————————————————————————————————————————— */

/* TÌM HIỂU SÂU */
/*  Padding  
The CSS padding properties are used to generate space around an element's content, inside of any defined borders.  */

.box {
  width: 150px;
  height: 100px;
  color: #ffa007;
}

div.padding-demo1 {
  background-color: #117f00;
  padding: 20px; /* Tất cả các cạnh cách content 20px */
}

div.padding-demo2 {
  background-color: #56f13e;
  padding-top: 20px;
  padding-bottom: 20px;
  padding-left: 10px;
  padding-right: 15px;
}

div.padding-demo3 {
  background-color: #34a123;
  /*       ↑↓    ←→         */
  padding: 20px 15px;
  /*        ↑    ←→    ↓    */
  padding: 30px 25px 20px;
  /*      ↑   →   ↓   ←     theo kim đồng hồ */
  padding: 15px 25mm 10px 25px;
}

/*  Border  
The CSS border properties allow you to specify the style, width, and color of an element's border.*/
div.border-demo1 {
  border: 10px solid blue; /* Size, style, color */
}

div.border-demo2 {
  border-top: 20px dashed black;
  border-bottom: 20px solid black;
  border-left: 10px dotted black;
  border-right: 15px double black;
}

div.border-demo3 {
  border-width: 10px 20px 25px 10px;
  border-color: #333 #5000a0 #6d1478 #b3326e;
  border-style: dashed double dotted ridge;
}

/* border-radius, có thể ghi chung ở trên*/
.border-demo1 {
  border-radius: 15%;
}

.border-demo2 {
  border-radius: 15px 20px 25px 20px;
}

.border-demo3 {
  border-top-right-radius: 50%;
  border-top-left-radius: 20px;
  border-bottom-left-radius: 5cm;
  border-bottom-right-radius: 12mm;
}

/*  Margin  
The CSS margin properties are used to create space around elements, outside of any defined borders.

Margins define the distance between an element's border and the surrounding elements.*/

/*   có những cách viết như padding   */
.margin-demo1 {
  background-color: #1e708e;
  border: 10px solid blueviolet;
  margin: 15px;
}

.margin-demo2 {
  background-color: #298e1e;
  border: 10px solid rgb(43, 113, 226);
  margin-left: 184.2px;
}

.margin-demo3 {
  background-color: #818e1e;
  border: 10px solid rgb(43, 226, 159);
  margin-left: -50px;
}

/* TỔNG QUAN */
/*  CÁC LỚP CỦA HỘP (TỪ TRONG RA NGOÀI)  */
/* Thêm một chút style cơ bản cho toàn bộ khu vực demo */

.box-model-visualizer {
  background-color: #f0f8ff; /* Màu nền nhạt để thấy rõ lớp Margin */
  border: 1px dashed #ccc; /* Viền mờ cho container ngoài cùng */
  /* min-height: 400px; Đảm bảo container đủ cao để chứa mọi thứ */
  max-width: 400px;
  padding: 50px;

  /* == "ĐŨA THẦN" FLEXBOX ĐÂY RỒI! ==
  Ba dòng này sẽ căn giữa một cách hoàn hảo cho phần tử con TRỰC TIẾP của nó (chính là .margin-layer)   */

  /* display: flex; Bật chế độ Flexbox */
  justify-content: center; /* Căn giữa theo chiều ngang*/
  align-items: center; /* Căn giữa theo chiều dọc */
}

/* --- Style cho từng lớp --- */

/* Lớp MARGIN (lớp ngoài cùng bên trong visualizer) */
.margin-layer {
  background-color: #ffe4e1; /* Màu của Margin (giả lập) */
  padding: 30px; /* Khoảng cách 30px này chính là "vùng margin" mà chúng ta đang minh họa */

  /* Lặp lại "đũa thần" để căn giữa cho ĐỨA CON của nó (là .border-layer) */
  /* display: flex; */
  justify-content: center;
  align-items: center;
}

/* Lớp BORDER */
.border-layer {
  background-color: #fffacd; /* Màu của Border (giả lập) */
  padding: 10px; /* Khoảng cách 10px này chính là "đường viền" */

  /* Lại lặp lại "đũa thần" để căn giữa cho ĐỨA CON của nó (là .padding-layer) */
  /* display: flex; */
  justify-content: center;
  align-items: center;
}

/* Lớp PADDING */
.padding-layer {
  background-color: #add8e6; /* Màu của Padding */
  padding: 20px; /* Khoảng cách 20px này chính là VÙNG ĐỆM THẬT SỰ */
  border: 2px solid #4682b4; /* Thêm border thật để thấy rõ hơn */

  /* Lại lặp lại... bạn hiểu ý rồi đó ;) */
  /* display: flex; */
  justify-content: center;
  align-items: center;
}

/* Lớp CONTENT (lớp trong cùng) */
.content-layer {
  background-color: #ffffff; /* Màu trắng cho vùng nội dung */
  /* width: 300px;  nhận từ div cha, dùng sẽ vỡ layout*/
  height: 100px;

  padding: 40px; /* Thêm chút padding cho nội dung bên trong không bị dính sát lề */
  border: 1px solid #333;

  /* Lớp trong cùng cũng cần căn giữa TEXT của nó */
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center; /* Đảm bảo text được căn giữa nếu có nhiều dòng */
}

/*  Tóm Lại Một Cách Đơn Giản Nhất:
HTML là những chiếc hộp lồng vào nhau.
"Nội dung" (content) của một hộp cha chính là TẤT CẢ những chiếc hộp con nằm ngay bên trong nó.
Kích thước của hộp cha (nếu không được set cứng) sẽ được quyết định bởi tổng không gian mà tất cả các hộp con đó chiếm giữ.  */

/* PHẦN KHÓ 1: MARGIN AUTO & MARGIN COLLAPSING */

.margin-auto-example {
  background-color: #34748b;
  margin: 0 auto;
}

.collapse-box-1 {
  background-color: #117f00;
  margin-bottom: 30px;
}

.collapse-box-2 {
  background-color: #34748b;
  margin-top: 50px;
}

/* PHẦN KHÓ 2: BOX-SIZING (KHÁI NIỆM QUAN TRỌNG NHẤT) */
.sizing-comparison-container .box {
  width: 200px;
  background-color: #4682b4;
  padding: 40px;
  border: 10px solid #333;
}

.sizing-content-box {
  box-sizing: content-box;
}

.sizing-border-box {
  box-sizing: border-box;
}

/* ——————————————————————————————————————— 
  PSEUDO-CLASSES 
———————————————————————————————————————————————————  
Some common use for pseudo-classes:
  Style an element when a user moves the mouse over it
  Style visited and unvisited links differently
  Style an element when it gets focus
  Style valid/invalid/required/optional form elements
  Style an element that is the first child of its parent
# Pseudo-classes are always denoted by a single colon (:) followed by the pseudo-class name      */

/* NHÓM 1: TRẠNG THÁI TƯƠNG TÁC CỦA NGƯỜI DÙNG */
/* :hover 
  Selects element on mouse over */
.demo-hover:hover {
  color: #ffb700;
}

/* :active 
  Selects the active link */
.demo-active:active {
  color: #ff5555;
}

/* :focus 
  Áp dụng style khi phần tử được "chọn" */
.demo-focus:focus {
  color: darkblue;
  outline-color: #117f00;
  border-width: 5px;
}

/* NHÓM 2: TRẠNG THÁI CỦA LIÊN KẾT (THẺ <a>) 
  Để hoạt động đúng, các selector này nên được viết trong file CSS theo thứ tự L-V-H-A (Link-Visited-Hover-Active). */
/* :link
  Selects any unvisited link */
.demo-link-states:link {
  color: #098cff;
}

/* :visited 
  Selects all visited links  */
.demo-link-states:visited {
  color: rgb(50, 161, 19);
}

/* :hover */
.demo-link-states:hover {
  color: #a4a1f1;
}

/* :active */
.demo-link-states:active {
  color: #4b0082;
}

/* NHÓM 3: CẤU TRÚC VỊ TRÍ (CHILD SELECTORS)  */
/* :first-child & :last-child & :only-child
  Selects the element that is the first/last/only child of its parent (among a group of sibling elements)   */
.demo-child-list li:first-child {
  color: #fe4242;
}

.demo-child-list li:last-child {
  color: #fa7a3e;
}

.parent-with-one-child:only-child {
  color: #ffcf82;
}

/* :nth-child(n) 
  Selects any <li> element that is the second child of its parent. */
.demo-nth-child-list li:nth-child(2) {
  color: rgb(108, 255, 55);
}

.demo-nth-child-list li:nth-child(odd) {
  color: rgb(248, 255, 49);
}

.demo-nth-child-list li:nth-child(even) {
  color: #00ffbf;
}
.demo-nth-child-list li:nth-child(2n + 1) {
  font-style: italic;
}

/* Sự khác biệt giữa "-child" và "-of-type"
  :first-child chọn phần tử đầu tiên NẾU NÓ KHỚP(vị trí). :first-of-type chọn phần tử đầu tiên CỦA LOẠI ĐÓ(kiểu loại).    */

/* :first-of-type & :last-of-type & :only-of-type & :nth-of-type(n) & :nth-last-of-type(n)
  Selects the first element of its type among a group of sibling elements 
  Selects any <p> element that is the last <p> element of its parent  */
.demo-type-vs-child h3:first-child {
  color: #00bbff;
}

.demo-type-vs-child p:first-of-type {
  color: #00ff44;
}

/* Error: */
.demo-type-vs-child p:first-child {
  color: #f51915;
}
/* Lúc này thẻ p không phải thẻ con đầu tiên */

.demo-type-vs-child p:nth-of-type(2) {
  color: #00ffbf;
}

.demo-type-vs-child div:only-of-type {
  font-style: italic;
}

/* Error: */
.demo-type-vs-child div:only-child {
  color: #f51915;
}
/* Thẻ div không phải thẻ con duy nhất, tồn tại nhiều thẻ khác */

.demo-type-vs-child p:last-of-type {
  color: #4b0082;
}

/* Error: */
.demo-type-vs-child p:last-child {
  color: #f51915;
}
/* Không phải thẻ con cuối cùng, thẻ h5 mới là cuối cùng */

/* NHÓM 4: TRẠNG THÁI NỘI DUNG & FORM */
/* :empty
  Selects any element that has no children (including text nodes) */
/* no content */
div[class*="empty"]:empty {
  height: 200px;
  width: 200px;
  background-color: darkmagenta;
}
/* can be used for elements with content */
.demo-empty-comment {
  height: 200px;
  width: 200px;
  background-color: rgb(51, 71, 15);
}

/* :target 
  Selects the current active target element */
#target-element:target {
  color: #4b0082;
  background-color: #a4a1f1;
}

/* :checked
  Selects the checkbox or radio ticked
  BƯỚC 1: Style cho label ở trạng thái bình thường (tùy chọn)
  Chúng ta dùng for="check" trong label để liên kết với id="check" của input, giúp người dùng có thể bấm vào chữ để tích checkbox. */
label[for="check"] {
  color: #333;
  cursor: pointer;
  transition: all 0.3s ease;
  /* Thêm hiệu ứng chuyển động cho mượt */
}

/*  BƯỚC 2: Style cho label KHI checkbox ĐƯỢC TÍCH (Đây là phần quan trọng nhất) 
  Selector này đọc là:
  "Hãy tìm một input có class là 'demo-check' KHI nó đang ở trạng thái :checked,"
  "SAU ĐÓ, hãy chọn người anh em (+) đứng ngay sau nó (chính là thẻ label)"
*/
.demo-check:checked + label {
  color: green;
  font-weight: bold;
  text-decoration: line-through;
  /* Gạch ngang chữ */
}

/* NHÓM 5: PHỦ ĐỊNH  */
/* :not
  Chọn tất cả các phần tử NGOẠI TRỪ những phần tử khớp với selector bên trong "not()".  */
.demo-not-list li:not(.special-item) {
  color: rgb(65, 176, 176);
}

/* NOTE: !important > Inline styles > Id selectors > Classes, attribute selectors and pseudo-classes > Elements and pseudo-elements > Universal selector */
.note-selector {
  color: #981a1a;
  font-size: larger;
}
